import 'tailwindcss/tailwind.css'
import Head from "next/head";
import React, { FormEvent, useState, useContext, ChangeEventHandler } from "react";
import Navbar from "../components/navbar";
import { Proposallist } from "../components/proposalList";
import { DataContext, useData } from "../contexts/dataContext";
import styles from "../styles/Home.module.css";
import { WebBundlr } from "@bundlr-network/client";
import BigNumber from "bignumber.js"
import { ethers } from "ethers"


 const Home = () => {
    const [title, setTitle] = useState("")
    const [description, setDescription] = useState("")
    const [amount, setAmount] = useState("")
    const [recipient, setRecipient] = useState("")
    const [image, setImage] = useState<any>();
     const { createProposal } = useData()
     const { library } = useContext(DataContext)
     const [URI,setURI] = useState("")
     


    
    //upload image
     const fetchImage = async (e: React.FormEvent<HTMLInputElement>) => {
         let selFile = e.target
         //@ts-ignore
         let imgSel = selFile.files[0] 
         let fileReader = new FileReader()
         fileReader.onload = () => {
             if (fileReader.result) {
                 //@ts-ignore
                 setImage(Buffer.from(fileReader.result))
             }
             
         }
         fileReader.readAsArrayBuffer(imgSel)


    
     }

//help upload to image
     const uploadToBundlr = async ():Promise<boolean> => {
        let bundlrInstance = new WebBundlr("https://devnet.bundlr.network", "matic", library)
        await bundlrInstance.ready();
         const loadedBal = ethers.utils.formatEther((await bundlrInstance.getLoadedBalance()).toString())
         if (parseInt(loadedBal) > 0) {
             alert("uploading image started")
            //@ts-ignore
             let tx = await bundlrInstance.uploader.upload(image, [{ name: "Content-Type", value: "image/png" }])
             console.log("wahala",`http://arweave.net/${tx.data.id}`)

             setURI(`http://arweave.net/${tx.data.id}`)

             if (tx.data.id) {
                 return true
             }
             else {
                 return false
             }

            
            
        
        }
        else {
            const conv = new BigNumber(0.1).multipliedBy(bundlrInstance.currencyConfig.base[1])
             await bundlrInstance.fund(conv)
             uploadToBundlr()
             return false
            
        }
    
}
     
const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    let uploadRes = await uploadToBundlr()
    if (uploadRes === true && URI) {
        alert("file uploaded successfully") 
        console.log("12Nightof12",title,description,amount,recipient,URI)
         createProposal({title,description,amount,recipient,imageId:URI})
              setTitle("");
             setDescription("");
             setAmount("")
             setRecipient("")
             setImage(null)
    }

 

     } 

     
     


    const { isMember, isStakeholder, loading } = useData();
    if (loading) return <div>loading... </div>
    

    return (
        <div className={styles.container}>
            <Head>
                <title>Funding DAO</title>
                <meta name="description" content="Generated by next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Navbar />
            {
                isMember && (
                    <main className="w-full flex flex-col py-4 flex-grow max-w-5xl items-center ">
                        <div className="w-full border-2 border-blue-600 rounded-xl p-3 mt-10 sm:w-3/4">
                            <div className="flex flex-col justify-center">
                                <span className="text-xl text-center"> Create a new Proposal</span>
                                <p className="mt-4">
                                You will need to lock 1 MATIC to create proposal.
                                </p>
                                <p className="text-sm mb-4">
                                If proposal is accepted, you will be refunded 1 MATIC and if
                                proposal is rejected, 1 MATIC will go to DAO treasury.

                                </p>
                                <form onSubmit={handleSubmit}>
                                    <input
                                        value={title}
                                        onChange={(e) => setTitle(e.target.value)}
                                        className="my-2 w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                                        placeholder="Title"
                                        autoComplete="off"
                                        required
                                    />

                                    <textarea
                                        placeholder="Describe your project here"
                                        rows={5}
                                        value={description}
                                        onChange={(e) => setDescription(e.target.value)}
                                        className="my-2 w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"

                                    ></textarea>
                                    <input
                                        className='w-full'
                                        type="file"
                                        name="proposal-image"
                                        onChange={fetchImage}
                                    />
                                    <input
                                        value={recipient}
                                        onChange={(e) => setRecipient(e.target.value)}
                                        className="my-2 w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                                        placeholder="Funding Receiver's Address"
                                        autoComplete="off"
                                        required
                                    />
                                    <input
                                        value={amount}
                                        onChange={(e) => setAmount(e.target.value)}
                                        className="my-2 w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                                        placeholder="Funding Amount"
                                        autoComplete="off"
                                        required
                                    />
                                    <button
                                        className="mt-3 px-3 py-2 rounded-xl bg-blue-600 text-white"
                                                type="submit"
                                                >
                                                        Create Proposal
                </button>
                                </form>
                            </div>
                    </div>
                    </main>
                )
            }
        </div>
    )
    
 }

 export default  Home